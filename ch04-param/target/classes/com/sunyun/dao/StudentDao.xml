<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.sunyun.dao.StudentDao">
   <select id="selectStudentById" resultType="com.sunyun.domain.Student">
       select * from student where id=#{studentid}
   </select>

    <select id="selectMulitParam" resultType="com.sunyun.domain.Student">
         select * from student where name=#{myname} or age=#{myage}
    </select>

<!--    #{属性名，javaType=，jdbcType=}
     简化方式 #{属性名} ，javaType和jdbcType的值由mybatis反射机制获取
     不要提供。
-->
<!--    <select id="selectMulitObject" resultType="com.sunyun.domain.Student">-->
<!--        select * from student where name=#{paramName,javaType="java.lang.String",jdbcType="varchar"} -->
<!--        or age=#{paramAge,javaType="java.lang.Integer",jdbcType="integer"}-->
<!--    </select>-->
    <select id="selectMulitObject" resultType="com.sunyun.domain.Student">
        select * from student where name=#{paramName}
        or age=#{paramAge}
    </select>


    <select id="selectMultiStudent" resultType="com.sunyun.domain.Student">
        select * from student where name=#{name}
        or age=#{age}
    </select>

    <select id="selectMultiArgs" resultType="com.sunyun.domain.Student">
        select * from student where name=#{args0}
        or age=#{args1}
    </select>
</mapper>

<!--
parameterType:dao接口中方法参数的数据类型
    parameterType他的值是java的数据类型全限定类的名称 或者 mybatis定义的别名
    全限定类的名称：parameterType="java.lang.Integer"
    别名：parameterType="int"

       注意：parameterType不是强制的，mybatis可以通过反射机制能够发现接口参数的数据的类型，所以可以没有
           一般都不写

                 在Mapper文件中获取一个参数的值，使用#{任意字符}

       使用#{}之后，mybatis执行是使用jdbc中的PreparedStatement对象
       由mybatis执行下面代码：
             1、mybatis创建Connection，PreparedStatement对象
              String sql=select * from student where id=？"
              PreparedStatement = coon.preparedStatement(sql);
              pst.setInt(1,1001);

             2、执行sql封装为ResultType="com.sunyun.domain.Student"这个对象
                ResultSet rs = ps.executeQuery();
                Student st = null;
                while(rs.next0{
                    //从数据库中取出表中的数据，存到java对象属性中
                    st = new Student();
                    st.setId(rs.getInt("id"));
                    st.setName(rs.getString("name));
                    ......

                    }

                 return st; //给了dao方法调用的返回值
-->